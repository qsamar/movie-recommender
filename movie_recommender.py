# -*- coding: utf-8 -*-
"""MOVIE RECOMMENDER

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PfBxLTzeivlvhhGJZTnPzMbwyaHXCB2K

#### Problem Statement

This is a transactional dataset that contains all the transactions occurring in the year 2011 for a UK-based and registered non-store online retail.

As a data scientist, you need to analyse the data and recommend the top 20 gifts as per the average number of transactions as well as the top 20 gifts as per average ordered items, so that company can gain top brands that are being sold and increase its sales as per market demands.

---
"""

# Import the required modules
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Read the dataset and print first five records.
df=pd.read_csv("https://drive.google.com/uc?id=1D3NbhoCql4CCkyocLe5-PWJYpFXs7QT9")
df.head()

"""Get the information about the dataset."""

# Print the information of the DataFrame using 'info()' function.
df.info()

"""Create a new DataFrame `ecommerce_df` that contains only the following features:
- `InvoiceNo`
- `Description`
- `Quantity`
"""

# Pull out 'InvoiceNo', 'Description', 'Quantity' columns
ec_df=df[['InvoiceNo', 'Description', 'Quantity']]

"""Group the above new DataFrame `ecommerce_df` by `Description` using `groupby()` function. Use `agg()` function to calculate the number of unique orders and sum of quantity for top 20 items in the following way:

```python
ecommerce_df.groupby('Description').agg(orders=('InvoiceNo', 'nunique'), quantity=('Quantity', 'sum')).head(20)
```

This will create a new DataFrame whose index is `Description` and has two columns: `orders` and `quantity`. Store this obtained DataFrame in a new DataFrame `ecomm_agg_df`.


"""

# Groupby the data item-wise using 'groupby()' and 'agg()' functions.
agg_df=ec_df.groupby('Description').agg(orders=('InvoiceNo', 'nunique'), quantity=('Quantity', 'sum')).head(20)
agg_df

"""---"""

# Recommendation on the basis of number of orders
# Sort the values by 'orders'
top_20_order=agg_df.sort_values('orders',ascending=False).head(20)
top_20_order

"""To visualise the top 20 gifts as per the order of the item. For this, create a barplot with `orders` on the $x$-axis and the index of the above DataFrame on the $y$-axis."""

# Plot top 20 gifts as per highest number of order of the items.
plt.figure(figsize = (12, 6))
sns.barplot(x='orders', y= top_20_order.index, data = top_20_order)
plt.title("Top 20 popular ordered items")
plt.show()

"""---

Recommendation Based on Quantity

Recommend items to the customers based on the past quantity orders, considering that if most people are buying them in bulk, then new customers will buy them too.

1. Sort the DataFrame `ecomm_agg_df` by `quantity` in descending order and use `head(20)` to get only the top 20 items.

2. Visualize the top 20 items as per quantities sold.

Sort the DataFrame `ecomm_agg_df` by `quantity` in descending order and use `head(20)` to get only the top 20 items.
"""

# Recommend top 20 gifts as per average quantity per transactions.
top_20_quantity=agg_df.sort_values('quantity',ascending=False).head(20)
top_20_quantity

"""Visualize the top 20 items as per quantities sold. For this, create a barplot with `quantity` on the $x$-axis and the index of the above DataFrame on the $y$-axis."""

# Plot top 20 items sold in largest quantity
plt.figure(figsize = (12, 6))
sns.barplot(x='quantity', y= top_20_quantity.index, data = top_20_quantity)
plt.title("Top 20 popular sold items")
plt.show()